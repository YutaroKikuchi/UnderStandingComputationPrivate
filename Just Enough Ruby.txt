Enumerable：なぜ(:&chars）が必要？
定数の削除：スクラッチとは？

対話型
irb --simple-promptで対話開始


・値
四則演算、（）ができる
文字列もオブジェクト
'文字列'.lengthで文字列の長さを返す（文字列はオブジェクト）
'文字列'.slice(x)で、x+1文字目を表示（1から数えて文字列をスライスした断面）
x=3など、=によって、値をバインドできる
Bool型もある。（true && false) || true
'文字列' + '文字列'　で、文字列を繋げられる
シンボル　:nameで、名前を表現する軽量な普遍値
nilは有効な値が存在しないことを示す

・データ構造
numbers = ['zero', 'one', 'two']で、リストが使える
numbers[x]で、値にアクセスできる。
リストには、push('three', 'four',...)で後ろに追加するメソッドや、
drop(x)でx番目の値を切り取るメソッドがある
rangeは、ages = 18..30という風に表現される。
range型には、entriesで含まれるすべての値をリスト表示するメソッドや、
include?(x)で、xが含まれているかを調べるメソッドがある
ハッシュ（連想配列、マップ的な）
fruit = { 'a' => 'apple', 'b' => 'banana', 'c' => 'coconut' }のように作成
fruit['b']のようにしてアクセス
fruitで全要素をハッシュ表示
キーはシンボルにされることが多く、Key: valueとコンパクトに書かれる。
fruits[:a]とアクセスする。

・Proc(ラムダ式）
function = -> arg1,arg2 {contents}と書くと作れる関数
function.call(arg1,arg2)で呼び出せる。
function[arg1,arg2]でも呼び出せる。

・制御フロー(endを忘れない）
対話型では、endや}しない限り,改行しても話を聞いてくれる
if文
if boolean 
trueprocess
else
falseprocess
end
case文patternには、boolではなく、値しか入らない。＜＞は使えない？
case value
when pattern1
	process1
when pattern2
	process2
else
	otherprocess
end
while文対話型では、打った瞬間に処理が行われる。
iterator=init (初期値設定）
while boolean　（作った初期値を使う）
	process
end

・オブジェクトとメソッド
Rubyでは、全てがオブジェクト！
o = Object.newで、新しいオブジェクトを作成
def o.function(arg1,arg2)
arg1 hogehoge arg2
end
のようにして、メソッドを定義。
return文は、なくてもいい。
最後に計算された式の返り値がメソッドの返り値になる。
o.function(arg1,arg2)で、メソッドを呼び出す
オブジェクトが自分自身のメソッドを使うとき、o.はいらなくなる。
常にselfが記録されている。
メソッド定義をするとき、o.など、オブジェクト名をつけなければ、
mainオブジェクトのメソッドとなり、o.無しで呼び出せる。
（グローバルメソッド的な）

・クラスとモジュール
class Classname(先頭大文字が主流）
def method1(arg1,arg2)
process1
end
…
end
でクラスが定義できる。自分のクラスのメソッドを気軽に使えるのが利点。
c = Classnameでインスタンス生成
c.method1(arg1,arg2)でメソッド実行
mainからは参照できないので注意
class Subclass < Superclas
def…
と、<を使うことで継承可能
継承中のメソッド定義において、super(arg1,arg2)関数で、
同名のスーパークラスの関数を呼び出せる。
result = super(arg1,arg2)として、resultを操作したりする。
to_sメソッドで、値を文字列にできる。
数オブジェクトは、to_s(n)メソッドで、n進数になった値の文字列に変換される。
module Modulename(先頭大文字が主流）
def …
を定義すると、include Modulenameと書くだけでそのメソッド達を取り込める。
ModuleがModuleをincludeすることも可能



以下は、サンプルコードで必要になるRubyのその他の機能
・ローカル変数と代入
x=3のように、値を代入することで、ローカル変数の宣言となる。
width, height, depth = [1000, 2250, 250]で、値を多重代入し、配列を作れる。

・文字列の式展開
文字列は、””か’’で囲む
ダブルクォートなら、式展開ができる。
式展開とは、#{'dlrow'.reverce}（'world'になる)
のような関数の返り値が結果に置き換えられること。＃を忘れない。
シングルクォートはそのまま
展開される式が文字列ではなくオブジェクトを返す場合、to_sメソッドが呼ばれる
そのように使う場合はto_sを定義しておくとよい。
定義していない場合は、#<Object:0xhogehoge>といった、アドレス？が返される。

・オブジェクトのインスペクト
オブジェクト名そのものを実行したとき、自動的にinspectメソッドが呼ばれる。
そのように使う場合は、inspectを定義しておくとよい。
定義していない場合は、#<Object:0xhogehoge>といった、アドレス？が返される。

・文字列のプリント
putsメソッドは、全てのRubyオブジェクトから参照できる、Kernelにある。
文字列を出力するのに使え、while文の中などで重宝する。

・可変長引数のメソッド
メソッド定義をするときに、*argsと、*演算子を使うことで複数の引数とみなす。
可変長引数は、リストである。
リストには、joinメソッドもあり、渡された文字列を1つの文字列にする。
joinメソッドは、引数に文字列を渡すと、つなぎ目にその文字列が挟まれる。
メソッドは、2つ以上の可変長引数を持てないが、それに加えて引数を持てる。
リストを可変長引数としてメソッドに渡すことができる。

・ブロック
メソッドの後ろに、do/endもしくは{}で囲まれた処理を記述したもの。
関数が引数になる的な。
メソッド定義内で、yieldキーワードによって、渡されたブロックを実行する。
ブロック内先頭に|arg1,arg2|と書くと引数になる。
実行時は、yield(arg1,arg2)と書く。
"one".upcase.reverseと、"one".reverse.upcaseは等価である。すなわち、
関数は繋げて書くことができる。次の関数に、前の関数の返り値が渡される。
引数の個数が合っていればできる。

・Enumerable
走査、検索、ソートに役立つメソッドが使えるモジュール
Array,Hash,Rangeなど、値のコレクションを表現するクラスに組み込まれている
例えば、(1..10).count { |number| number.even? }のように使う。
       ↑レンジ　↑メソッド　↑あらかじめかけておくフィルタ
countメソッド：コレクションの個数を返す
even?/odd?メソッド：偶数/奇数ならば、Trueを返す
any?メソッド：1つでも値があれば、Trueを返す
all?メソッド：元のコレクションから減っているものがなければTrueを返す
eachメソッド：コレクションを、1つ1つ最初から取り出し、ブロック内の操作を行う。
(1..10).select(&:even?)のような、(&:message)　短縮記法も使える
mapメソッド：['aa','bb','cc']⇒[["a","a"],["b","b"],["c","c"]] なぜ(:&chars）が必要？
flat_mapメソッド：["aa","bb","cc"]⇒["a","a","b","b","c","c"]
inject(初期値)メソッド：初期値を最初の結果として、resultという変数を使い、累積する。
(1..10).inject(0) { |result,number| result + number }といった具合

・Structクラス
Struct.new(:x, :y)を継承（<)すると、各属性のセッター、ゲッターが使える。
:x,:yは、属性名
テキストでは、+メソッドにother_pointというオブジェクト型の引数を与え、
そのother_point.x,other_point.yを使っている。
object.xや、object.yで値にアクセスできる。
Struct.newを継承すると、属性を比較する、==メソッドが使える。True/False

・モンキーパッチング
既存のクラスや、モジュールには、いつでも新しいメソッドを追加できる。（組み込みでさえ）
これをモンキーパッチングと呼ぶ。

・定数定義
変数名が大文字で始まるものは、定数（constant）として扱われ、再代入すると警告が出る。
メソッド内以外で定義可能
要素には、classname::CONSTANTNAMEでアクセスできる。
クラス名もモジュール名も、大文字で始まる。⇒クラス、モジュールも定数！

・定数削除
Object.send(:remove_const, :CONSTANTNAME)で、定数の削除が可能。
Object.remove_const(:NAME)ではダメ。
remove_constは、プライベートメソッドだから。
Object.sendで、一時的にこれを回避できる。